# ############################################################
#                        Reset vectors
# ############################################################

ResetAddress: jmp Boot
ExceptionAddress: jmp ExceptionHandler

# ############################################################
#                        Constants
# ############################################################

SYSREGS_BASE = 0x00000000
HEAP_BASE    = 0x00000400
STACK_BASE   = 0x03F70000
VGA_BASE     = 0x03F80000
HWREG_BASE   = 0xE0000000
PROGMEM_BASE = 0xFFFF0000

# hardware registers
HWREG_7SEG       = 0x00     # 7-segment display
HWREG_LED        = 0x04     # 10 status LED's
HWREG_UART_TX    = 0x10     # Write to this to send a byte. Read gives free slots in fifo
HWREG_UART_RX    = 0x14     # Read to get a byte. -1 if empty
HWREG_SIMULATION = 0x30     # Reads as 1 in simulator, 0 on silicon


# ############################################################
#                        BOOT entry point
# ############################################################

Boot:
    ld $sp, 0x04000000            # Initialize the stack pointer
    jmp /Boot                     # jump into the fpl boot code

# ############################################################
#                        abort
# ############################################################
# Exit the Program. In simulation we do a jump to address 0
# This fires a trap in the simulator which causes the program to stop
# On the FPGA we just loop forever flashing the LED's
#
# Input: $1 = error code

/abort:
    ld $2, HWREG_BASE
    stw $1, $2[HWREG_7SEG]        # Display the error code on the 7-segment display
    ldw $1, $2[HWREG_SIMULATION]  # Check if we are running on FPGA or in a simulation
    beq $1, 0, .on_fpga

    ld $2, 0                      # If we are in a simulation jump to address 0
    jmp $2                        # This will cause a trap in the simulator which stops the program

.on_fpga:                         # on the FPGA we just loop forever flashing the LED's
    xor $1, 0x3FF                 # Toggle the LED's
    stw $1, $2[HWREG_LED]         # Set all the LED's
    ld  $3, 10000000              # Delay number
.delay:
    sub $3, 1
    bne $3, 0, .delay
    jmp .on_fpga

# ############################################################
#                        memcpy
# ############################################################
# $1 = destination
# $2 = source
# $3 = number of bytes
/memcpy:
    beq $3, 0, .end

    # test to see in everything is aligned to 4 bytes
    or $4, $1, $2
    or $4, $3
    and $4, 3
    bne $4, 0, .not_aligned

    # everything is aligned -> copy words at a time
.loop:
    ldw $4, $2[0]
    stw $4, $1[0]
    add $1, 4
    add $2, 4
    sub $3, 4
    bne $3, 0, .loop
.end:
    ret

    # not aligned -> copy bytes at a time
.not_aligned:
    ldb $4, $2[0]
    stb $4, $1[0]
    add $1, 1
    add $2, 1
    sub $3, 1
    bne $3, 0, .not_aligned
    ret

# ############################################################
#                      Exception Handler
# ############################################################
# Copy the contents of all the registers into a task control
# block, setup the supervisor stack and jump to the fpl coded
# exception handler.

ExceptionHandler:
    cfg $29, !escratch, $29     # Get the task control block into $29
    ld $1,$1                    # need to allow the pipeline to flush
    stw $1, $29[4]              # save all the registers into the tcb
    stw $2, $29[8]
    stw $3, $29[12]
    stw $4, $29[16]
    stw $5, $29[20]
    stw $6, $29[24]
    stw $7, $29[28]
    stw $8, $29[32]
    stw $9, $29[36]
    stw $10, $29[40]
    stw $11, $29[44]
    stw $12, $29[48]
    stw $13, $29[52]
    stw $14, $29[56]
    stw $15, $29[60]
    stw $16, $29[64]
    stw $17, $29[68]
    stw $18, $29[72]
    stw $19, $29[76]
    stw $20, $29[80]
    stw $21, $29[84]
    stw $22, $29[88]
    stw $23, $29[92]
    stw $24, $29[96]
    stw $25, $29[100]
    stw $26, $29[104]
    stw $27, $29[108]
    stw $28, $29[112]
    stw $30, $29[120]
    stw $sp, $29[124]
    cfg $1, !escratch             # Get the user's $29 back out of the scratch register
    stw $1, $29[116]
    ld $sp, 0x04000000            # Setup the supervisor stack

    cfg $1, !epc                  # Get the exception PC
    stw $1, $29[0]                # Store the exception PC into the tcb
    cfg $1, !ecause               # Get the exception cause as argument1
    cfg $2, !edata
    ld $3, $29                    # pass the tcb as argument 2
    jmp /ExceptionHandler


# ############################################################
#                         RunTask
# ############################################################
# Run a task from a task control block
# Input: $1 = task control block

/runTask:
    ld  $29, $1                     # Load the task control block
    ldw $1, $29[0]                  # Get the PC from the task control block
    cfg !epc, $1                    # Set the exception PC
    ldw $1,  $29[116]               # get the task's $29
    cfg !escratch, $1               # Set the scratch register to the task's $29
    ldw $1,  $29[4]                 # Load the task's $1
    ldw $2,  $29[8]
    ldw $3,  $29[12]
    ldw $4,  $29[16]
    ldw $5,  $29[20]
    ldw $6,  $29[24]
    ldw $7,  $29[28]
    ldw $8,  $29[32]
    ldw $9,  $29[36]
    ldw $10, $29[40]
    ldw $11, $29[44]
    ldw $12, $29[48]
    ldw $13, $29[52]
    ldw $14, $29[56]
    ldw $15, $29[60]
    ldw $16, $29[64]
    ldw $17, $29[68]
    ldw $18, $29[72]
    ldw $19, $29[76]
    ldw $20, $29[80]
    ldw $21, $29[84]
    ldw $22, $29[88]
    ldw $23, $29[92]
    ldw $24, $29[96]
    ldw $25, $29[100]
    ldw $26, $29[104]
    ldw $27, $29[108]
    ldw $28, $29[112]
    ldw $30, $29[120]
    ldw $sp, $29[124]
    cfg $29, !escratch, $29         # Swap the scratch register back to the task's $29
                                    # Which leaves the tcb in !escratch
    rte                             # Return to the task


# ############################################################
#                      Yield Task
# ############################################################
# Copy the contents of all the registers into a task control
# block, setup the supervisor stack and jump to the fpl coded
# scheduler

/yield:
    cfg $29, !escratch, $29     # Get the task control block into $29
    ld $1,$1                    # need to allow the pipeline to flush
    stw $30, $29[0]             # set the PC to be the return address of the call to yield()
    stw $1, $29[4]              # save all the registers into the tcb
    stw $2, $29[8]
    stw $3, $29[12]
    stw $4, $29[16]
    stw $5, $29[20]
    stw $6, $29[24]
    stw $7, $29[28]
    stw $8, $29[32]
    stw $9, $29[36]
    stw $10, $29[40]
    stw $11, $29[44]
    stw $12, $29[48]
    stw $13, $29[52]
    stw $14, $29[56]
    stw $15, $29[60]
    stw $16, $29[64]
    stw $17, $29[68]
    stw $18, $29[72]
    stw $19, $29[76]
    stw $20, $29[80]
    stw $21, $29[84]
    stw $22, $29[88]
    stw $23, $29[92]
    stw $24, $29[96]
    stw $25, $29[100]
    stw $26, $29[104]
    stw $27, $29[108]
    stw $28, $29[112]
    stw $30, $29[120]
    stw $sp, $29[124]
    cfg $1, !escratch             # Get the user's $29 back out of the scratch register
    stw $1, $29[116]

    ld $sp, 0x04000000            # Setup the supervisor stack
    ld $29, 0
    jmp /Scheduler


# ############################################################
#                      Sleep Task
# ############################################################
# Copy the contents of all the registers into a task control
# block, setup the supervisor stack and jump to the fpl coded
# scheduler

/sleep:
    cfg $29, !escratch, $29     # Get the task control block into $29
    ld $1,$1                    # need to allow the pipeline to flush
    stw $30, $29[0]             # set the PC to be the return address of the call to yield()
    stw $1, $29[4]              # save all the registers into the tcb
    stw $2, $29[8]
    stw $3, $29[12]
    stw $4, $29[16]
    stw $5, $29[20]
    stw $6, $29[24]
    stw $7, $29[28]
    stw $8, $29[32]
    stw $9, $29[36]
    stw $10, $29[40]
    stw $11, $29[44]
    stw $12, $29[48]
    stw $13, $29[52]
    stw $14, $29[56]
    stw $15, $29[60]
    stw $16, $29[64]
    stw $17, $29[68]
    stw $18, $29[72]
    stw $19, $29[76]
    stw $20, $29[80]
    stw $21, $29[84]
    stw $22, $29[88]
    stw $23, $29[92]
    stw $24, $29[96]
    stw $25, $29[100]
    stw $26, $29[104]
    stw $27, $29[108]
    stw $28, $29[112]
    stw $30, $29[120]
    stw $sp, $29[124]
    cfg $1, !escratch             # Get the user's $29 back out of the scratch register
    stw $1, $29[116]

    ld $sp, 0x04000000            # Setup the supervisor stack
    ld $29, 0
    jmp /sleep2