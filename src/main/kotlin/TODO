Done:
   class statements with fields
   peephole optimization
   register allocation
   asm code generation
   varargs
   null values
   path dependant types
   constructor calls
   repeat until
   compile time evaluation of constants
   stdlib: printf width specifiers
   stdlib: malloc
   local allocations of objects
   constructors calls in codegen
   method calls
   delete operator
   for loop iterators
   string concatenation
   string comparison ops
   when statement
   break / continue
   += -= etc
   named constants
   enum
   when(enum) check for complete coverage
   not operator
   inheritance
   virtual methods
   'is' tests
   type refinement for is tests

ShortTerm:
   static fields in classes
   static methods
   ?: operator
   ?. operator
   const arrays
   unsigned types

Medium term:
   splat operator
   aggregate initializers
   when with `is` clauses
   `is` operator with hierarchy

Longer Term:
   List<>
   lambdas
   polymorphism
   inline classes/arrays
   change malloc to freelist rather than bump allocator
   abstract class
   generics?
   extension functions
   when statement - use a binary search or lookup table
   sealed classes

optimizer:
   common subexpression elimination
   function inlining
   function elimination (walk the call graph and remove unused functions)
   hoisting
   tail call elimination
